// Script de diagn√≥stico para verificar qu√© archivo JavaScript se est√° cargando

const fs = require('fs');
const path = require('path');

console.log('üîç Diagn√≥stico de archivos JavaScript de producci√≥n\n');

// Verificar archivo en public/js/produccion.js
const publicPath = path.join(__dirname, 'public', 'js', 'produccion.js');
console.log('üìÅ Ruta del archivo:', publicPath);
console.log('üìÑ ¬øExiste?:', fs.existsSync(publicPath));

if (fs.existsSync(publicPath)) {
    const content = fs.readFileSync(publicPath, 'utf8');
    const lines = content.split('\n');
    
    console.log('\nüìä Estad√≠sticas del archivo:');
    console.log('   - Total de l√≠neas:', lines.length);
    console.log('   - Tama√±o:', (content.length / 1024).toFixed(2), 'KB');
    
    // Buscar la funci√≥n renderizarPedidosPorCliente
    const renderFunctionLine = lines.findIndex(line => line.includes('function renderizarPedidosPorCliente'));
    console.log('\nüîç Funci√≥n renderizarPedidosPorCliente encontrada en l√≠nea:', renderFunctionLine + 1);
    
    // Buscar logs de DEBUG
    const debugLogs = lines.filter(line => line.includes('DEBUG Cliente'));
    console.log('üêõ Logs de DEBUG encontrados:', debugLogs.length);
    
    if (debugLogs.length > 0) {
        console.log('\n‚úÖ El archivo TIENE los logs de DEBUG');
        console.log('üìù Ejemplo de log encontrado:');
        debugLogs.slice(0, 2).forEach(log => {
            console.log('   ', log.trim());
        });
    } else {
        console.log('\n‚ùå El archivo NO TIENE los logs de DEBUG');
        console.log('‚ö†Ô∏è El navegador est√° cargando una versi√≥n antigua del archivo');
    }
    
    // Buscar la l√≥gica de agrupaci√≥n por presupuesto
    const presupuestosMapLines = lines.filter(line => line.includes('presupuestosMap'));
    console.log('\nüó∫Ô∏è Referencias a presupuestosMap:', presupuestosMapLines.length);
    
    if (presupuestosMapLines.length > 0) {
        console.log('‚úÖ El archivo TIENE la l√≥gica de agrupaci√≥n por presupuesto');
    } else {
        console.log('‚ùå El archivo NO TIENE la l√≥gica de agrupaci√≥n por presupuesto');
    }
    
    // Mostrar las primeras l√≠neas de la funci√≥n renderizarPedidosPorCliente
    if (renderFunctionLine >= 0) {
        console.log('\nüìÑ Primeras 20 l√≠neas de renderizarPedidosPorCliente:');
        console.log('‚îÄ'.repeat(80));
        lines.slice(renderFunctionLine, renderFunctionLine + 20).forEach((line, idx) => {
            console.log(`${renderFunctionLine + idx + 1}:`, line);
        });
        console.log('‚îÄ'.repeat(80));
    }
}

console.log('\nüí° Soluci√≥n sugerida:');
console.log('   1. El navegador tiene el archivo en cach√©');
console.log('   2. Agreg√° un par√°metro de versi√≥n al HTML');
console.log('   3. O cambi√° el nombre del archivo temporalmente');
