/**
 * DIAGN√ìSTICO SIMPLIFICADO: An√°lisis de hojas de Google Sheets
 * Solo lee las hojas sin conectar a la base de datos
 */

const { readSheetWithHeaders } = require('./src/services/gsheets/client_with_logs');

async function diagnosticarSheetsSimple() {
    console.log('üîç [DIAGN√ìSTICO] Iniciando an√°lisis de hojas de Google Sheets...\n');
    
    try {
        // Usar configuraci√≥n hardcodeada
        const sheetId = '1r7VEnEArREqAGZiDxQCW4A0XIKb8qaxHXD0TlVhfuf8';
        console.log('üìã Sheet ID:', sheetId);
        
        // PASO 1: Leer hoja "Presupuestos"
        console.log('\n=== PASO 1: AN√ÅLISIS HOJA "Presupuestos" ===');
        const presupuestosData = await readSheetWithHeaders(sheetId, 'A:O', 'Presupuestos');
        
        console.log('üìä Encabezados Presupuestos:', presupuestosData.headers);
        console.log('üìä Total filas:', presupuestosData.rows.length);
        
        // Verificar nombres exactos de columnas
        const idPresupuestoCol = presupuestosData.headers[0];
        console.log(`üîç Columna A (ID): "${idPresupuestoCol}"`);
        
        if (presupuestosData.rows.length > 0) {
            console.log('üìã Primeras 3 filas de presupuestos:');
            presupuestosData.rows.slice(0, 3).forEach((row, i) => {
                console.log(`   Fila ${i + 2}: ID="${row[idPresupuestoCol]}", Cliente="${row[presupuestosData.headers[2]]}", Estado="${row[presupuestosData.headers[7]]}"`);
            });
        }
        
        // PASO 2: Leer hoja "DetallesPresupuestos"
        console.log('\n=== PASO 2: AN√ÅLISIS HOJA "DetallesPresupuestos" ===');
        const detallesData = await readSheetWithHeaders(sheetId, 'A:Q', 'DetallesPresupuestos');
        
        console.log('üìä Encabezados DetallesPresupuestos:', detallesData.headers);
        console.log('üìä Total filas:', detallesData.rows.length);
        
        // Verificar nombres exactos de columnas
        const idDetalleCol = detallesData.headers[0];
        const idPresupuestoDetalleCol = detallesData.headers[1];
        const articuloCol = detallesData.headers[2];
        
        console.log(`üîç Columna A (ID Detalle): "${idDetalleCol}"`);
        console.log(`üîç Columna B (ID Presupuesto): "${idPresupuestoDetalleCol}"`);
        console.log(`üîç Columna C (Art√≠culo): "${articuloCol}"`);
        
        if (detallesData.rows.length > 0) {
            console.log('üìã Primeras 5 filas de detalles:');
            detallesData.rows.slice(0, 5).forEach((row, i) => {
                console.log(`   Fila ${i + 2}: IDPresupuesto="${row[idPresupuestoDetalleCol]}", Art√≠culo="${row[articuloCol]}", Cantidad="${row[detallesData.headers[3]]}"`);
            });
        }
        
        // PASO 3: An√°lisis de coincidencias de ID
        console.log('\n=== PASO 3: AN√ÅLISIS DE COINCIDENCIAS DE ID ===');
        
        // Crear mapas de IDs
        const idsPresupuestos = new Set();
        presupuestosData.rows.forEach(row => {
            const id = (row[idPresupuestoCol] || '').toString().trim();
            if (id) idsPresupuestos.add(id);
        });
        
        const idsDetalles = new Set();
        const detallesPorPresupuesto = new Map();
        detallesData.rows.forEach(row => {
            const idPresupuesto = (row[idPresupuestoDetalleCol] || '').toString().trim();
            if (idPresupuesto) {
                idsDetalles.add(idPresupuesto);
                if (!detallesPorPresupuesto.has(idPresupuesto)) {
                    detallesPorPresupuesto.set(idPresupuesto, []);
                }
                detallesPorPresupuesto.get(idPresupuesto).push(row);
            }
        });
        
        console.log(`üìä IDs √∫nicos en Presupuestos: ${idsPresupuestos.size}`);
        console.log(`üìä IDs √∫nicos en Detalles: ${idsDetalles.size}`);
        
        // Encontrar coincidencias y diferencias
        const coincidencias = [...idsPresupuestos].filter(id => idsDetalles.has(id));
        const presupuestosSinDetalles = [...idsPresupuestos].filter(id => !idsDetalles.has(id));
        const detallesSinPresupuesto = [...idsDetalles].filter(id => !idsPresupuestos.has(id));
        
        console.log(`‚úÖ Presupuestos con detalles: ${coincidencias.length}`);
        console.log(`‚ùå Presupuestos sin detalles: ${presupuestosSinDetalles.length}`);
        console.log(`‚ö†Ô∏è Detalles sin presupuesto: ${detallesSinPresupuesto.length}`);
        
        if (presupuestosSinDetalles.length > 0) {
            console.log('üìã Presupuestos sin detalles (primeros 5):');
            presupuestosSinDetalles.slice(0, 5).forEach(id => {
                console.log(`   - ${id}`);
            });
        }
        
        if (detallesSinPresupuesto.length > 0) {
            console.log('üìã Detalles sin presupuesto (primeros 5):');
            detallesSinPresupuesto.slice(0, 5).forEach(id => {
                console.log(`   - ${id}`);
            });
        }
        
        // PASO 4: Seleccionar presupuesto de prueba
        console.log('\n=== PASO 4: PRESUPUESTO DE PRUEBA ===');
        
        let presupuestoPrueba = null;
        if (coincidencias.length > 0) {
            presupuestoPrueba = coincidencias[0];
            const detallesDelPresupuesto = detallesPorPresupuesto.get(presupuestoPrueba);
            
            console.log(`üéØ Presupuesto seleccionado: ${presupuestoPrueba}`);
            console.log(`üìä Cantidad de detalles: ${detallesDelPresupuesto.length}`);
            
            console.log('üìã Detalles del presupuesto:');
            detallesDelPresupuesto.forEach((detalle, i) => {
                console.log(`   ${i + 1}. ${detalle[articuloCol]} - Cant: ${detalle[detallesData.headers[3]]} - Precio: ${detalle[detallesData.headers[5]]}`);
            });
        } else {
            console.log('‚ùå No se encontraron presupuestos con detalles para usar como prueba');
        }
        
        // PASO 5: An√°lisis de encabezados cr√≠ticos
        console.log('\n=== PASO 5: AN√ÅLISIS DE ENCABEZADOS CR√çTICOS ===');
        
        console.log('üîç Verificando nombres exactos de columnas:');
        console.log(`   Presupuestos[0]: "${presupuestosData.headers[0]}" (esperado: "IDPresupuesto")`);
        console.log(`   Detalles[1]: "${detallesData.headers[1]}" (esperado: "IdPresupuesto" o "IDPresupuesto")`);
        
        // Verificar si hay diferencias de may√∫sculas/min√∫sculas
        const headerPresupuestos = presupuestosData.headers[0];
        const headerDetalles = detallesData.headers[1];
        
        if (headerPresupuestos !== headerDetalles) {
            console.log('‚ö†Ô∏è DIFERENCIA EN ENCABEZADOS DETECTADA:');
            console.log(`   Presupuestos: "${headerPresupuestos}"`);
            console.log(`   Detalles: "${headerDetalles}"`);
            console.log('   Esta diferencia puede causar problemas en el mapeo autom√°tico');
        } else {
            console.log('‚úÖ Los encabezados de ID coinciden exactamente');
        }
        
        // PASO 6: Simulaci√≥n de mapeo
        console.log('\n=== PASO 6: SIMULACI√ìN DE MAPEO ===');
        
        // Simular el proceso de mapeo como lo hace mapTwoSheetsToPresupuestos
        const presupuestosMap = new Map();
        
        // Procesar presupuestos
        presupuestosData.rows.forEach((row, i) => {
            const id_presupuesto_ext = row[presupuestosData.headers[0]] || '';
            const id_cliente = row[presupuestosData.headers[2]] || '';
            
            if (id_presupuesto_ext && id_cliente) {
                const presupuestoKey = id_presupuesto_ext.toString().trim();
                presupuestosMap.set(presupuestoKey, {
                    presupuesto: { id_presupuesto_ext: presupuestoKey, id_cliente },
                    detalles: []
                });
            }
        });
        
        console.log(`üìä Presupuestos mapeados: ${presupuestosMap.size}`);
        
        // Procesar detalles
        let detallesAsignados = 0;
        let detallesOmitidos = 0;
        
        detallesData.rows.forEach((row, i) => {
            const id_presupuesto = row[detallesData.headers[1]] || '';
            const articulo = row[detallesData.headers[2]] || '';
            
            if (id_presupuesto && articulo) {
                const presupuestoKey = id_presupuesto.toString().trim();
                
                if (presupuestosMap.has(presupuestoKey)) {
                    presupuestosMap.get(presupuestoKey).detalles.push({
                        articulo: articulo.toString().trim(),
                        cantidad: row[detallesData.headers[3]] || 0
                    });
                    detallesAsignados++;
                } else {
                    detallesOmitidos++;
                    console.log(`   ‚ùå Detalle omitido: ID="${presupuestoKey}", Art√≠culo="${articulo}"`);
                }
            }
        });
        
        console.log(`‚úÖ Detalles asignados: ${detallesAsignados}`);
        console.log(`‚ùå Detalles omitidos: ${detallesOmitidos}`);
        
        // Contar presupuestos con y sin detalles despu√©s del mapeo
        let conDetalles = 0;
        let sinDetalles = 0;
        
        presupuestosMap.forEach(p => {
            if (p.detalles.length > 0) {
                conDetalles++;
            } else {
                sinDetalles++;
            }
        });
        
        console.log(`üìä Resultado del mapeo:`);
        console.log(`   - Presupuestos con detalles: ${conDetalles}`);
        console.log(`   - Presupuestos sin detalles: ${sinDetalles}`);
        
        // PASO 7: An√°lisis espec√≠fico del c√≥digo de sincronizaci√≥n
        console.log('\n=== PASO 7: AN√ÅLISIS DEL C√ìDIGO DE SINCRONIZACI√ìN ===');
        
        // Verificar si el problema est√° en la funci√≥n syncDetallesDesdeSheets
        console.log('üîç Verificando l√≥gica de syncDetallesDesdeSheets:');
        
        // Simular la b√∫squeda de √≠ndice como lo hace el c√≥digo real
        const H = detallesData.headers;
        const norm = (s) => (s ?? '').toString().normalize('NFD').replace(/[\u0300-\u036f]/g, '').replace(/\s+/g, '').toLowerCase();
        const hmap = new Map(); 
        H.forEach((name, i) => hmap.set(norm(name), i));
        
        const findIdx = (...cands) => { 
            for (const c of cands) { 
                const hit = hmap.get(norm(c)); 
                if (hit !== undefined) return hit; 
            } 
            return -1; 
        };
        
        const idx = {
            id: findIdx('IDPresupuesto', 'ID Presupuesto'),
            art: findIdx('Articulo', 'Art√≠culo'),
            cant: findIdx('Cantidad', 'Cant'),
            valor1: findIdx('Valor1', 'Valor 1', 'Valor'),
            precio1: findIdx('Precio1', 'Precio 1', 'Precio'),
            iva1: findIdx('IVA1', 'IVA 1', 'IVA')
        };
        
        console.log('üìä √çndices encontrados por syncDetallesDesdeSheets:');
        console.log(`   - ID: ${idx.id} (columna: "${H[idx.id] || 'NO ENCONTRADA'}")`);
        console.log(`   - Art√≠culo: ${idx.art} (columna: "${H[idx.art] || 'NO ENCONTRADA'}")`);
        console.log(`   - Cantidad: ${idx.cant} (columna: "${H[idx.cant] || 'NO ENCONTRADA'}")`);
        console.log(`   - Valor1: ${idx.valor1} (columna: "${H[idx.valor1] || 'NO ENCONTRADA'}")`);
        console.log(`   - Precio1: ${idx.precio1} (columna: "${H[idx.precio1] || 'NO ENCONTRADA'}")`);
        console.log(`   - IVA1: ${idx.iva1} (columna: "${H[idx.iva1] || 'NO ENCONTRADA'}")`);
        
        const columnasFaltantes = [];
        if (idx.id === -1) columnasFaltantes.push('IDPresupuesto');
        if (idx.art === -1) columnasFaltantes.push('Articulo');
        if (idx.cant === -1) columnasFaltantes.push('Cantidad');
        if (idx.valor1 === -1) columnasFaltantes.push('Valor1');
        if (idx.precio1 === -1) columnasFaltantes.push('Precio1');
        if (idx.iva1 === -1) columnasFaltantes.push('IVA1');
        
        if (columnasFaltantes.length > 0) {
            console.log('üö® PROBLEMA DETECTADO: Faltan encabezados necesarios');
            console.log('‚ùå Columnas faltantes:', columnasFaltantes.join(', '));
            console.log('üìã Encabezados disponibles:', H);
        } else {
            console.log('‚úÖ Todos los encabezados necesarios est√°n presentes');
        }
        
        // PASO 8: Diagn√≥stico final
        console.log('\n=== DIAGN√ìSTICO FINAL ===');
        
        if (columnasFaltantes.length > 0) {
            console.log('üö® CAUSA RA√çZ IDENTIFICADA:');
            console.log('   La funci√≥n syncDetallesDesdeSheets no puede procesar los detalles');
            console.log('   porque no encuentra las columnas necesarias con los nombres esperados.');
            console.log('');
            console.log('üîç CAUSA ESPEC√çFICA:');
            console.log(`   - Faltan columnas: ${columnasFaltantes.join(', ')}`);
            console.log(`   - Encabezados reales: ${H.join(', ')}`);
            console.log('');
            console.log('üìç UBICACI√ìN DEL PROBLEMA:');
            console.log('   - Archivo: src/presupuestos/controllers/sync_fechas_fix.js');
            console.log('   - Funci√≥n: syncDetallesDesdeSheets');
            console.log('   - L√≠nea: ~580-590 (donde se definen los √≠ndices)');
        } else if (detallesOmitidos > 0) {
            console.log('üö® CAUSA RA√çZ IDENTIFICADA:');
            console.log('   Los detalles se est√°n omitiendo durante el proceso de mapeo');
            console.log('   porque no encuentran coincidencia con los presupuestos');
            
            if (headerPresupuestos !== headerDetalles) {
                console.log('üîç CAUSA ESPEC√çFICA: Diferencia en nombres de encabezados');
                console.log(`   - Hoja Presupuestos usa: "${headerPresupuestos}"`);
                console.log(`   - Hoja Detalles usa: "${headerDetalles}"`);
                console.log('   - El c√≥digo espera coincidencia exacta para el mapeo');
            }
        } else {
            console.log('‚úÖ Las hojas parecen estar correctamente estructuradas');
            console.log('   El problema puede estar en la l√≥gica de sincronizaci√≥n o en la base de datos');
        }
        
    } catch (error) {
        console.error('‚ùå Error en diagn√≥stico:', error.message);
        console.error('Stack:', error.stack);
    }
}

// Ejecutar diagn√≥stico si se llama directamente
if (require.main === module) {
    diagnosticarSheetsSimple();
}

module.exports = { diagnosticarSheetsSimple };
