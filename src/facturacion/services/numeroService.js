/**
 * Servicio de numeraci√≥n de comprobantes
 * Gestiona numeraci√≥n AFIP e interna con locks para evitar duplicados
 */

const { pool, ejecutarTransaccion } = require('../config/database');
const { paraBD } = require('../config/timezone');
const { ultimoAutorizado } = require('./wsfeService');

console.log('üîç [FACTURACION-NUMERO] Cargando servicio de numeraci√≥n...');

/**
 * Obtener siguiente n√∫mero AFIP
 * Consulta AFIP y actualiza tabla de numeraci√≥n
 * 
 * @param {number} ptoVta - Punto de venta
 * @param {number} tipoCbte - Tipo de comprobante
 * @param {string} entorno - 'HOMO' o 'PROD'
 * @returns {Promise<number>} Siguiente n√∫mero
 */
const nextAfip = async (ptoVta, tipoCbte, entorno = 'HOMO') => {
    console.log(`üî¢ [FACTURACION-NUMERO] Obteniendo siguiente n√∫mero AFIP PV:${ptoVta} Tipo:${tipoCbte}`);
    
    try {
        return await ejecutarTransaccion(async (client) => {
            // 1. Bloquear registro para evitar race conditions
            console.log(`üîí [FACTURACION-NUMERO] Bloqueando registro de numeraci√≥n...`);
            
            const lockQuery = `
                SELECT ultimo_cbte_afip
                FROM factura_numeracion_afip
                WHERE pto_vta = $1 AND tipo_cbte = $2
                FOR UPDATE
            `;
            
            let resultado = await client.query(lockQuery, [ptoVta, tipoCbte]);
            
            let ultimoLocal = 0;
            
            if (resultado.rows.length === 0) {
                // No existe registro, crear uno
                console.log(`üìù [FACTURACION-NUMERO] Creando registro de numeraci√≥n...`);
                
                // Consultar √∫ltimo autorizado en AFIP
                const ultimoAfip = await ultimoAutorizado(ptoVta, tipoCbte, entorno);
                console.log(`üìä [FACTURACION-NUMERO] √öltimo AFIP: ${ultimoAfip}`);
                
                const insertQuery = `
                    INSERT INTO factura_numeracion_afip (pto_vta, tipo_cbte, ultimo_cbte_afip, actualizado_en)
                    VALUES ($1, $2, $3, $4)
                    RETURNING ultimo_cbte_afip
                `;
                
                resultado = await client.query(insertQuery, [ptoVta, tipoCbte, ultimoAfip, paraBD()]);
                ultimoLocal = resultado.rows[0].ultimo_cbte_afip;
            } else {
                ultimoLocal = resultado.rows[0].ultimo_cbte_afip;
                console.log(`üìä [FACTURACION-NUMERO] √öltimo local: ${ultimoLocal}`);
            }
            
            // 2. Calcular siguiente n√∫mero
            const siguiente = ultimoLocal + 1;
            console.log(`‚ûï [FACTURACION-NUMERO] Siguiente n√∫mero: ${siguiente}`);
            
            // 3. Actualizar registro
            const updateQuery = `
                UPDATE factura_numeracion_afip
                SET ultimo_cbte_afip = $1, actualizado_en = $2
                WHERE pto_vta = $3 AND tipo_cbte = $4
            `;
            
            await client.query(updateQuery, [siguiente, paraBD(), ptoVta, tipoCbte]);
            console.log(`‚úÖ [FACTURACION-NUMERO] Numeraci√≥n actualizada`);
            
            return siguiente;
        });
        
    } catch (error) {
        console.error('‚ùå [FACTURACION-NUMERO] Error obteniendo siguiente n√∫mero AFIP:', error.message);
        throw error;
    }
};

/**
 * Obtener siguiente n√∫mero interno
 * Para facturas que no requieren AFIP
 * 
 * @param {string} serieInterna - Serie interna (ej: 'A', 'B', 'X')
 * @returns {Promise<number>} Siguiente n√∫mero
 */
const nextInterno = async (serieInterna) => {
    console.log(`üî¢ [FACTURACION-NUMERO] Obteniendo siguiente n√∫mero interno serie: ${serieInterna}`);
    
    try {
        return await ejecutarTransaccion(async (client) => {
            // 1. Bloquear registro
            console.log(`üîí [FACTURACION-NUMERO] Bloqueando registro de numeraci√≥n interna...`);
            
            const lockQuery = `
                SELECT ultimo_nro
                FROM factura_numeracion_interna
                WHERE serie_interna = $1
                FOR UPDATE
            `;
            
            let resultado = await client.query(lockQuery, [serieInterna]);
            
            let ultimoNro = 0;
            
            if (resultado.rows.length === 0) {
                // No existe registro, crear uno
                console.log(`üìù [FACTURACION-NUMERO] Creando registro de numeraci√≥n interna...`);
                
                const insertQuery = `
                    INSERT INTO factura_numeracion_interna (serie_interna, ultimo_nro, actualizado_en)
                    VALUES ($1, $2, $3)
                    RETURNING ultimo_nro
                `;
                
                resultado = await client.query(insertQuery, [serieInterna, 0, paraBD()]);
                ultimoNro = resultado.rows[0].ultimo_nro;
            } else {
                ultimoNro = resultado.rows[0].ultimo_nro;
                console.log(`üìä [FACTURACION-NUMERO] √öltimo n√∫mero: ${ultimoNro}`);
            }
            
            // 2. Calcular siguiente n√∫mero
            const siguiente = ultimoNro + 1;
            console.log(`‚ûï [FACTURACION-NUMERO] Siguiente n√∫mero: ${siguiente}`);
            
            // 3. Actualizar registro
            const updateQuery = `
                UPDATE factura_numeracion_interna
                SET ultimo_nro = $1, actualizado_en = $2
                WHERE serie_interna = $3
            `;
            
            await client.query(updateQuery, [siguiente, paraBD(), serieInterna]);
            console.log(`‚úÖ [FACTURACION-NUMERO] Numeraci√≥n interna actualizada`);
            
            return siguiente;
        });
        
    } catch (error) {
        console.error('‚ùå [FACTURACION-NUMERO] Error obteniendo siguiente n√∫mero interno:', error.message);
        throw error;
    }
};

/**
 * Sincronizar numeraci√≥n AFIP con √∫ltimo autorizado
 * √ötil para recuperar sincronizaci√≥n despu√©s de errores
 * 
 * @param {number} ptoVta - Punto de venta
 * @param {number} tipoCbte - Tipo de comprobante
 * @param {string} entorno - 'HOMO' o 'PROD'
 * @returns {Promise<Object>} Resultado de sincronizaci√≥n
 */
const sincronizarAfip = async (ptoVta, tipoCbte, entorno = 'HOMO') => {
    console.log(`üîÑ [FACTURACION-NUMERO] Sincronizando numeraci√≥n AFIP PV:${ptoVta} Tipo:${tipoCbte}`);
    
    try {
        // 1. Consultar √∫ltimo autorizado en AFIP
        const ultimoAfip = await ultimoAutorizado(ptoVta, tipoCbte, entorno);
        console.log(`üìä [FACTURACION-NUMERO] √öltimo AFIP: ${ultimoAfip}`);
        
        // 2. Obtener √∫ltimo local
        const queryLocal = `
            SELECT ultimo_cbte_afip
            FROM factura_numeracion_afip
            WHERE pto_vta = $1 AND tipo_cbte = $2
        `;
        
        const resultadoLocal = await pool.query(queryLocal, [ptoVta, tipoCbte]);
        const ultimoLocal = resultadoLocal.rows.length > 0 
            ? resultadoLocal.rows[0].ultimo_cbte_afip 
            : 0;
        
        console.log(`üìä [FACTURACION-NUMERO] √öltimo local: ${ultimoLocal}`);
        
        // 3. Actualizar si hay diferencia
        if (ultimoAfip !== ultimoLocal) {
            console.log(`‚ö†Ô∏è [FACTURACION-NUMERO] Diferencia detectada, actualizando...`);
            
            const updateQuery = `
                INSERT INTO factura_numeracion_afip (pto_vta, tipo_cbte, ultimo_cbte_afip, actualizado_en)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (pto_vta, tipo_cbte)
                DO UPDATE SET
                    ultimo_cbte_afip = EXCLUDED.ultimo_cbte_afip,
                    actualizado_en = EXCLUDED.actualizado_en
            `;
            
            await pool.query(updateQuery, [ptoVta, tipoCbte, ultimoAfip, paraBD()]);
            
            console.log(`‚úÖ [FACTURACION-NUMERO] Numeraci√≥n sincronizada`);
            
            return {
                sincronizado: true,
                ultimoAfip,
                ultimoLocal,
                diferencia: ultimoAfip - ultimoLocal
            };
        }
        
        console.log(`‚úÖ [FACTURACION-NUMERO] Numeraci√≥n ya sincronizada`);
        
        return {
            sincronizado: true,
            ultimoAfip,
            ultimoLocal,
            diferencia: 0
        };
        
    } catch (error) {
        console.error('‚ùå [FACTURACION-NUMERO] Error sincronizando numeraci√≥n:', error.message);
        throw error;
    }
};

/**
 * Obtener estado de numeraci√≥n
 * @param {number} ptoVta - Punto de venta
 * @param {number} tipoCbte - Tipo de comprobante
 * @returns {Promise<Object>} Estado de numeraci√≥n
 */
const obtenerEstadoAfip = async (ptoVta, tipoCbte) => {
    console.log(`üîç [FACTURACION-NUMERO] Obteniendo estado de numeraci√≥n PV:${ptoVta} Tipo:${tipoCbte}`);
    
    try {
        const query = `
            SELECT ultimo_cbte_afip, actualizado_en
            FROM factura_numeracion_afip
            WHERE pto_vta = $1 AND tipo_cbte = $2
        `;
        
        const resultado = await pool.query(query, [ptoVta, tipoCbte]);
        
        if (resultado.rows.length === 0) {
            console.log(`üìù [FACTURACION-NUMERO] No hay registro de numeraci√≥n`);
            return {
                existe: false,
                ultimo: 0,
                siguiente: 1
            };
        }
        
        const ultimo = resultado.rows[0].ultimo_cbte_afip;
        const actualizado = resultado.rows[0].actualizado_en;
        
        console.log(`‚úÖ [FACTURACION-NUMERO] Estado obtenido - √öltimo: ${ultimo}`);
        
        return {
            existe: true,
            ultimo,
            siguiente: ultimo + 1,
            actualizado
        };
        
    } catch (error) {
        console.error('‚ùå [FACTURACION-NUMERO] Error obteniendo estado:', error.message);
        throw error;
    }
};

/**
 * Obtener estado de numeraci√≥n interna
 * @param {string} serieInterna - Serie interna
 * @returns {Promise<Object>} Estado de numeraci√≥n
 */
const obtenerEstadoInterno = async (serieInterna) => {
    console.log(`üîç [FACTURACION-NUMERO] Obteniendo estado de numeraci√≥n interna serie: ${serieInterna}`);
    
    try {
        const query = `
            SELECT ultimo_nro, actualizado_en
            FROM factura_numeracion_interna
            WHERE serie_interna = $1
        `;
        
        const resultado = await pool.query(query, [serieInterna]);
        
        if (resultado.rows.length === 0) {
            console.log(`üìù [FACTURACION-NUMERO] No hay registro de numeraci√≥n interna`);
            return {
                existe: false,
                ultimo: 0,
                siguiente: 1
            };
        }
        
        const ultimo = resultado.rows[0].ultimo_nro;
        const actualizado = resultado.rows[0].actualizado_en;
        
        console.log(`‚úÖ [FACTURACION-NUMERO] Estado obtenido - √öltimo: ${ultimo}`);
        
        return {
            existe: true,
            ultimo,
            siguiente: ultimo + 1,
            actualizado
        };
        
    } catch (error) {
        console.error('‚ùå [FACTURACION-NUMERO] Error obteniendo estado interno:', error.message);
        throw error;
    }
};

console.log('‚úÖ [FACTURACION-NUMERO] Servicio de numeraci√≥n cargado');

module.exports = {
    nextAfip,
    nextInterno,
    sincronizarAfip,
    obtenerEstadoAfip,
    obtenerEstadoInterno
};
