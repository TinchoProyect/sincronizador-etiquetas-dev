console.log('üîç [PRESUPUESTOS] Cargando middleware de autenticaci√≥n...');

/**
 * Middleware b√°sico de autenticaci√≥n para el m√≥dulo de presupuestos
 * Integra con el sistema de usuarios existente del proyecto LAMDA
 */

// Middleware para logging de requests
const requestLogger = (req, res, next) => {
    const timestamp = new Date().toISOString();
    console.log(`üîç [PRESUPUESTOS] ${timestamp} - ${req.method} ${req.originalUrl}`);
    
    // Log del body si existe (para debugging)
    if (req.body && Object.keys(req.body).length > 0) {
        console.log('üì• [PRESUPUESTOS] Request body:', JSON.stringify(req.body, null, 2));
    }
    
    next();
};

// Middleware para validar sesi√≥n b√°sica (placeholder para futura integraci√≥n)
const validateSession = (req, res, next) => {
    // TODO: Integrar con sistema de autenticaci√≥n existente
    console.log('üîê [PRESUPUESTOS] Validando sesi√≥n de usuario...');
    
    // Por ahora, permitir todas las requests (desarrollo)
    // En producci√≥n, aqu√≠ se validar√≠a la sesi√≥n del usuario
    req.user = {
        id: 1,
        nombre: 'Usuario Sistema',
        rol: 'admin'
    };
    
    console.log('‚úÖ [PRESUPUESTOS] Usuario autenticado:', req.user.nombre);
    next();
};

// Middleware para validar permisos espec√≠ficos del m√≥dulo
const validatePermissions = (requiredPermission) => {
    return (req, res, next) => {
        console.log(`üîí [PRESUPUESTOS] Validando permiso: ${requiredPermission}`);
        
        // TODO: Implementar validaci√≥n real de permisos
        // Por ahora, permitir todos los permisos (desarrollo)
        console.log('‚úÖ [PRESUPUESTOS] Permiso concedido');
        next();
    };
};

// Middleware para manejo de errores espec√≠fico del m√≥dulo
const errorHandler = (err, req, res, next) => {
    console.error('‚ùå [PRESUPUESTOS] Error en middleware:', err.message);
    console.error('‚ùå [PRESUPUESTOS] Stack trace:', err.stack);
    
    // Respuesta de error estructurada
    const errorResponse = {
        error: 'Error interno del m√≥dulo de presupuestos',
        message: err.message,
        timestamp: new Date().toISOString(),
        path: req.originalUrl
    };
    
    // En desarrollo, incluir stack trace
    if (process.env.NODE_ENV === 'development') {
        errorResponse.stack = err.stack;
    }
    
    res.status(500).json(errorResponse);
};

console.log('‚úÖ [PRESUPUESTOS] Middleware de autenticaci√≥n configurado');

module.exports = {
    requestLogger,
    validateSession,
    validatePermissions,
    errorHandler
};
