const { registrarMovimientoStockVentas } = require('./stockVentasMovimientos');

/**
 * Finaliza la producci√≥n de un carro y registra los movimientos de stock de ventas
 */
async function 
finalizarProduccion(req, res) {
    const db = req.db;
    const { id: carroId } = req.params;
    const { usuarioId, kilos_producidos } = req.body;

    if (!carroId || !usuarioId) {
        return res.status(400).json({ 
            error: 'Faltan datos obligatorios (carroId o usuarioId)' 
        });
    }

    // Validar kilos_producidos solo si se proporciona (ser√° requerido para carros externos)
    if (kilos_producidos !== undefined && kilos_producidos !== null && (isNaN(kilos_producidos) || kilos_producidos <= 0)) {
        return res.status(400).json({
            error: 'Si se proporciona kilos_producidos, debe ser un valor num√©rico v√°lido mayor a cero'
        });
    }

    try {
        // Iniciar transacci√≥n
        await db.query('BEGIN');

        // 1. Verificar que el carro exista, pertenezca al usuario y est√© preparado
        const { rows: [carro] } = await db.query(
            'SELECT * FROM carros_produccion WHERE id = $1 AND usuario_id = $2',
            [carroId, usuarioId]
        );

        if (!carro) {
            throw new Error('Carro no encontrado o no pertenece al usuario');
        }

        // 2. Verificar que est√© preparado pero no confirmado
        if (!carro.fecha_preparado) {
            throw new Error('El carro debe estar marcado como preparado antes de finalizar la producci√≥n');
        }

        if (carro.fecha_confirmacion) {
            return res.json({
                mensaje: 'La producci√≥n de este carro ya fue confirmada anteriormente',
                fecha: carro.fecha_confirmacion
            });
        }

        console.log('\nüì¶ REGISTRANDO MOVIMIENTOS DE STOCK DE VENTAS');
        console.log('==========================================');

        const { recalcularStockConsolidado } = require('../utils/recalcularStock');
        const articulosAfectados = [];
        let articulosCarro = [];

        // 3. Obtener art√≠culos seg√∫n el tipo de carro
        if (carro.tipo_carro === 'externa') {
            console.log('\nüîç ===== DIAGN√ìSTICO DETALLADO - CARRO EXTERNO =====');
            console.log(`üìã CARRO ID: ${carroId}`);
            console.log(`üë§ USUARIO ID: ${usuarioId}`);
            console.log(`üì¶ TIPO CARRO: ${carro.tipo_carro}`);
            console.log(`‚è∞ FECHA PREPARADO: ${carro.fecha_preparado}`);
            console.log(`‚è∞ FECHA CONFIRMACION: ${carro.fecha_confirmacion}`);
            
            // LOG 1: Antes de la consulta SQL a articulos_produccion_externa_relacion
            console.log('\nüîç LOG 1: ANTES DE CONSULTA SQL - articulos_produccion_externa_relacion');
            console.log('==========================================');
            console.log(`Query a ejecutar:`);
            console.log(`SELECT rel.articulo_kilo_codigo, a.codigo_barras, a.nombre, ca.cantidad, rel.multiplicador_ingredientes`);
            console.log(`FROM carros_articulos ca`);
            console.log(`INNER JOIN articulos_produccion_externa_relacion rel ON ca.articulo_numero = rel.articulo_produccion_codigo`);
            console.log(`LEFT JOIN articulos a ON a.numero = rel.articulo_kilo_codigo`);
            console.log(`WHERE ca.carro_id = ${carroId}`);
            
            // VERIFICACI√ìN T√âCNICA ADICIONAL: Obtener art√≠culos exactos del carro
            console.log('\nüîç VERIFICACI√ìN T√âCNICA: Art√≠culos exactos en el carro');
            console.log('==========================================');
            const { rows: articulosExactos } = await db.query(`
                SELECT 
                    ca.articulo_numero,
                    ca.cantidad,
                    LENGTH(ca.articulo_numero) as longitud_codigo,
                    ASCII(SUBSTRING(ca.articulo_numero, 1, 1)) as primer_caracter_ascii,
                    ASCII(SUBSTRING(ca.articulo_numero, LENGTH(ca.articulo_numero), 1)) as ultimo_caracter_ascii
                FROM carros_articulos ca
                WHERE ca.carro_id = $1
            `, [carroId]);
            
            console.log(`üì¶ Art√≠culos encontrados en carros_articulos: ${articulosExactos.length}`);
            articulosExactos.forEach((art, index) => {
                console.log(`  ${index + 1}. C√≥digo: "${art.articulo_numero}"`);
                console.log(`     - Cantidad: ${art.cantidad}`);
                console.log(`     - Longitud: ${art.longitud_codigo} caracteres`);
                console.log(`     - Primer car√°cter ASCII: ${art.primer_caracter_ascii}`);
                console.log(`     - √öltimo car√°cter ASCII: ${art.ultimo_caracter_ascii}`);
                console.log(`     - Representaci√≥n hexadecimal: ${Buffer.from(art.articulo_numero, 'utf8').toString('hex')}`);
            });
            
            // VERIFICACI√ìN T√âCNICA: Buscar v√≠nculos exactos para cada art√≠culo
            console.log('\nüîç VERIFICACI√ìN T√âCNICA: B√∫squeda directa de v√≠nculos');
            console.log('==========================================');
            for (const artExacto of articulosExactos) {
                console.log(`\nüîé Buscando v√≠nculos para: "${artExacto.articulo_numero}"`);
                
                // B√∫squeda exacta
                const { rows: vinculosExactos } = await db.query(`
                    SELECT 
                        articulo_produccion_codigo,
                        articulo_kilo_codigo,
                        multiplicador_ingredientes,
                        LENGTH(articulo_produccion_codigo) as longitud_produccion,
                        ASCII(SUBSTRING(articulo_produccion_codigo, 1, 1)) as primer_ascii_produccion,
                        ASCII(SUBSTRING(articulo_produccion_codigo, LENGTH(articulo_produccion_codigo), 1)) as ultimo_ascii_produccion
                    FROM articulos_produccion_externa_relacion
                    WHERE articulo_produccion_codigo = $1
                `, [artExacto.articulo_numero]);
                
                console.log(`   üìä V√≠nculos encontrados con b√∫squeda exacta: ${vinculosExactos.length}`);
                if (vinculosExactos.length > 0) {
                    vinculosExactos.forEach((vinculo, idx) => {
                        console.log(`     ${idx + 1}. Producci√≥n: "${vinculo.articulo_produccion_codigo}"`);
                        console.log(`        - Kilo: "${vinculo.articulo_kilo_codigo}"`);
                        console.log(`        - Multiplicador: ${vinculo.multiplicador_ingredientes}`);
                        console.log(`        - Longitud producci√≥n: ${vinculo.longitud_produccion}`);
                        console.log(`        - Primer ASCII producci√≥n: ${vinculo.primer_ascii_produccion}`);
                        console.log(`        - √öltimo ASCII producci√≥n: ${vinculo.ultimo_ascii_produccion}`);
                    });
                } else {
                    console.log(`   ‚ö†Ô∏è NO se encontraron v√≠nculos exactos`);
                    
                    // B√∫squeda con LIKE para detectar problemas de espacios o caracteres
                    const { rows: vinculosLike } = await db.query(`
                        SELECT 
                            articulo_produccion_codigo,
                            articulo_kilo_codigo,
                            LENGTH(articulo_produccion_codigo) as longitud,
                            TRIM(articulo_produccion_codigo) as codigo_trimmed
                        FROM articulos_produccion_externa_relacion
                        WHERE articulo_produccion_codigo LIKE $1
                           OR TRIM(articulo_produccion_codigo) = $2
                           OR UPPER(articulo_produccion_codigo) = UPPER($3)
                    `, [`%${artExacto.articulo_numero}%`, artExacto.articulo_numero.trim(), artExacto.articulo_numero]);
                    
                    console.log(`   üîç B√∫squeda con LIKE/TRIM/UPPER: ${vinculosLike.length} resultados`);
                    vinculosLike.forEach((vinculo, idx) => {
                        console.log(`     ${idx + 1}. C√≥digo BD: "${vinculo.articulo_produccion_codigo}"`);
                        console.log(`        - C√≥digo trimmed: "${vinculo.codigo_trimmed}"`);
                        console.log(`        - Longitud: ${vinculo.longitud}`);
                        console.log(`        - ¬øCoincide exacto?: ${vinculo.articulo_produccion_codigo === artExacto.articulo_numero}`);
                        console.log(`        - ¬øCoincide trimmed?: ${vinculo.codigo_trimmed === artExacto.articulo_numero.trim()}`);
                    });
                }
            }
            
            // Para carros externos, obtener art√≠culos vinculados
            const { rows: articulosVinculados } = await db.query(`
                SELECT 
                    rel.articulo_kilo_codigo as articulo_numero,
                    a.codigo_barras,
                    a.nombre as descripcion,
                    ca.cantidad,
                    rel.multiplicador_ingredientes
                FROM carros_articulos ca
                INNER JOIN articulos_produccion_externa_relacion rel 
                    ON ca.articulo_numero = rel.articulo_produccion_codigo
                LEFT JOIN articulos a ON a.numero = rel.articulo_kilo_codigo
                WHERE ca.carro_id = $1
            `, [carroId]);
            
            // LOG 2: Despu√©s de la consulta SQL
            console.log('\nüîç LOG 2: DESPU√âS DE CONSULTA SQL - RESULTADOS');
            console.log('==========================================');
            console.log(`üìä N√∫mero de art√≠culos vinculados encontrados: ${articulosVinculados.length}`);
            
            if (articulosVinculados.length > 0) {
                console.log('üìã DETALLE DE ART√çCULOS VINCULADOS:');
                articulosVinculados.forEach((art, index) => {
                    console.log(`  ${index + 1}. Art√≠culo kilo: ${art.articulo_numero}`);
                    console.log(`     - Descripci√≥n: ${art.descripcion || 'Sin descripci√≥n'}`);
                    console.log(`     - Cantidad: ${art.cantidad}`);
                    console.log(`     - C√≥digo barras: ${art.codigo_barras || 'Sin c√≥digo'}`);
                    console.log(`     - Multiplicador: ${art.multiplicador_ingredientes || 1}`);
                });
            } else {
                console.log('‚ö†Ô∏è NO SE ENCONTRARON ART√çCULOS VINCULADOS');
                
                // Diagn√≥stico adicional: verificar si existen art√≠culos en el carro
                const { rows: articulosEnCarro } = await db.query(`
                    SELECT ca.articulo_numero, ca.cantidad
                    FROM carros_articulos ca
                    WHERE ca.carro_id = $1
                `, [carroId]);
                
                console.log(`üì¶ Art√≠culos en el carro (sin v√≠nculos): ${articulosEnCarro.length}`);
                articulosEnCarro.forEach((art, index) => {
                    console.log(`  ${index + 1}. ${art.articulo_numero} - Cantidad: ${art.cantidad}`);
                });
                
                // Verificar si existen v√≠nculos para estos art√≠culos
                if (articulosEnCarro.length > 0) {
                    for (const artCarro of articulosEnCarro) {
                        const { rows: vinculos } = await db.query(`
                            SELECT * FROM articulos_produccion_externa_relacion
                            WHERE articulo_produccion_codigo = $1
                        `, [artCarro.articulo_numero]);
                        
                        console.log(`üîó V√≠nculos para ${artCarro.articulo_numero}: ${vinculos.length}`);
                        if (vinculos.length > 0) {
                            vinculos.forEach((vinculo, idx) => {
                                console.log(`    ${idx + 1}. C√≥digo producci√≥n: ${vinculo.articulo_produccion_codigo}`);
                                console.log(`       C√≥digo kilo: ${vinculo.articulo_kilo_codigo}`);
                                console.log(`       Multiplicador: ${vinculo.multiplicador_ingredientes}`);
                            });
                        }
                    }
                }
            }
            
            articulosCarro = articulosVinculados;
            console.log('üîó Usando art√≠culos vinculados para carro externo');
        } else {
            // Para carros internos, obtener art√≠culos del carro normalmente
            const { rows: articulosInternos } = await db.query(`
                SELECT 
                    ca.articulo_numero,
                    ca.cantidad,
                    a.codigo_barras,
                    a.nombre as descripcion
                FROM carros_articulos ca
                LEFT JOIN articulos a ON a.numero = ca.articulo_numero
                WHERE ca.carro_id = $1
            `, [carroId]);
            
            articulosCarro = articulosInternos;
            console.log('üè≠ Usando art√≠culos del carro para carro interno');
        }

        // LOG 3: Justo antes del chequeo de articulosCarro.length === 0
        console.log('\nüîç LOG 3: ANTES DEL CHEQUEO DE LONGITUD DE ART√çCULOS');
        console.log('==========================================');
        console.log(`üìä articulosCarro.length: ${articulosCarro.length}`);
        console.log(`üîç Contenido de articulosCarro:`, JSON.stringify(articulosCarro, null, 2));
        
        if (articulosCarro.length === 0) {
            console.log('‚ùå ERROR: El carro no tiene art√≠culos para finalizar');
            console.log('üîç DIAGN√ìSTICO FINAL: El flujo se detiene aqu√≠ - no se ejecutar√°n los siguientes pasos:');
            console.log('   - Registro en produccion_externa_historial');
            console.log('   - Registro de movimiento "ingreso por produccion externa"');
            console.log('   - Actualizaci√≥n de stock_consolidado');
            throw new Error('El carro no tiene art√≠culos para finalizar');
        }
        
        console.log('‚úÖ VALIDACI√ìN EXITOSA: El carro tiene art√≠culos para procesar');

        // 4. Registrar en produccion_externa_historial PRIMERO (solo para carros externos)
        let historialData = null;
        if (carro.tipo_carro === 'externa') {
            // Validar que se haya proporcionado kilos_producidos para carros externos
            if (kilos_producidos === undefined || kilos_producidos === null || isNaN(kilos_producidos) || kilos_producidos <= 0) {
                throw new Error('Para carros de producci√≥n externa es obligatorio ingresar los kilos producidos');
            }
            
            console.log('\nüìù REGISTRANDO EN HISTORIAL DE PRODUCCI√ìN EXTERNA');
            console.log('==========================================');
            
            // Obtener art√≠culos padre del carro (no los vinculados)
            const { rows: articulosPadre } = await db.query(`
                SELECT 
                    ca.articulo_numero,
                    ca.cantidad,
                    a.nombre as descripcion
                FROM carros_articulos ca
                LEFT JOIN articulos a ON a.numero = ca.articulo_numero
                WHERE ca.carro_id = $1
                LIMIT 1
            `, [carroId]);
            
            if (articulosPadre.length === 0) {
                throw new Error('No se encontraron art√≠culos padre para el historial');
            }
            
            const articuloPadre = articulosPadre[0];
            console.log(`üîç DEBUG - Art√≠culo padre obtenido:`, {
                codigo: articuloPadre.articulo_numero,
                descripcion: articuloPadre.descripcion,
                cantidad: articuloPadre.cantidad
            });
            
            // El art√≠culo fraccionado ya lo tenemos en articulosCarro[0] (que son los vinculados)
            const articuloFraccionadoCodigo = articulosCarro[0]?.articulo_numero || null;
            console.log(`‚úÖ DEBUG - Art√≠culo fraccionado: ${articuloFraccionadoCodigo}`);
            
            // Calcular ingredientes_sumados: obtener ingredientes del art√≠culo vinculado
            let ingredientesSumados = 0;
            if (articuloFraccionadoCodigo) {
                console.log(`\nüßÆ CALCULANDO INGREDIENTES SUMADOS PARA: ${articuloFraccionadoCodigo}`);
                console.log('==========================================');
                
                // Obtener ingredientes vinculados usando la funci√≥n existente
                const { obtenerIngredientesArticulosVinculados } = require('./carroIngredientes');
                const ingredientesVinculados = await obtenerIngredientesArticulosVinculados(carroId, usuarioId);
                
                console.log(`üîç Ingredientes vinculados obtenidos: ${ingredientesVinculados.length}`);
                
                // Sumar todas las cantidades de ingredientes vinculados
                ingredientesSumados = ingredientesVinculados.reduce((suma, ingrediente) => {
                    const cantidad = parseFloat(ingrediente.cantidad) || 0;
                    console.log(`- ${ingrediente.nombre}: ${cantidad} ${ingrediente.unidad_medida || 'kg'}`);
                    return suma + cantidad;
                }, 0);
                
                // Redondear a 2 decimales para evitar problemas de precisi√≥n
                ingredientesSumados = Number(ingredientesSumados.toFixed(2));
                
                console.log(`\nüìä TOTAL INGREDIENTES SUMADOS: ${ingredientesSumados} kg`);
                console.log('==========================================');
            } else {
                console.log(`‚ö†Ô∏è No se encontr√≥ art√≠culo vinculado, ingredientes_sumados = 0`);
            }
            
            // Preparar datos para inserci√≥n (usando c√≥digos alfanum√©ricos como TEXT)
            const datosHistorial = [
                carroId,                              // carro_id (integer)
                usuarioId,                            // usuario_id (integer)
                articuloPadre.articulo_numero,        // articulo_padre_id (text) - c√≥digo alfanum√©rico
                articuloFraccionadoCodigo,            // articulo_fraccionado_id (text) - c√≥digo alfanum√©rico o null
                kilos_producidos,                     // kilos_producidos (numeric)
                ingredientesSumados                   // ingredientes_sumados (numeric)
            ];
            
            console.log(`üîç DEBUG - Datos para insertar en historial:`, {
                carro_id: carroId,
                usuario_id: usuarioId,
                articulo_padre_id: articuloPadre.articulo_numero,
                articulo_fraccionado_id: articuloFraccionadoCodigo,
                kilos_producidos: kilos_producidos,
                ingredientes_sumados: ingredientesSumados
            });
            
            // Insertar en historial usando c√≥digos alfanum√©ricos
            await db.query(`
                INSERT INTO produccion_externa_historial (
                    carro_id,
                    usuario_id,
                    articulo_padre_id,
                    articulo_fraccionado_id,
                    kilos_producidos,
                    ingredientes_sumados,
                    fecha_registro
                ) VALUES ($1, $2, $3, $4, $5, $6, NOW())
            `, datosHistorial);
            
            console.log(`‚úÖ Registro en historial creado para carro ${carroId}`);
            console.log(`- Art√≠culo padre (c√≥digo): ${articuloPadre.articulo_numero}`);
            console.log(`- Art√≠culo fraccionado (c√≥digo): ${articuloFraccionadoCodigo || 'No definido'}`);
            console.log(`- Kilos producidos: ${kilos_producidos}`);
            
            // Guardar datos para usar en el registro de movimientos
            historialData = {
                articulo_fraccionado_id: articuloFraccionadoCodigo,
                kilos_producidos: kilos_producidos,
                ingredientes_sumados: ingredientesSumados
            };
        }

        // 5. Registrar movimientos seg√∫n el tipo de carro
        for (const articulo of articulosCarro) {
            console.log(`\nüîÑ Procesando art√≠culo ${articulo.articulo_numero}:`);
            console.log(`- Descripci√≥n: ${articulo.descripcion}`);
            console.log(`- Cantidad: ${articulo.cantidad}`);
            console.log(`- C√≥digo de barras: ${articulo.codigo_barras}`);
            
            if (carro.tipo_carro === 'externa') {
                // Para carros externos: usar datos del historial ya creado
                const cantidadTotal = parseFloat(historialData.kilos_producidos) + parseFloat(historialData.ingredientes_sumados);
                
                console.log(`üîç Datos del historial para carro ${carroId}:`);
                console.log(`- Art√≠culo vinculado: ${historialData.articulo_fraccionado_id}`);
                console.log(`- Kilos producidos: ${historialData.kilos_producidos}`);
                console.log(`- Ingredientes sumados: ${historialData.ingredientes_sumados}`);
                console.log(`- Cantidad total calculada: ${cantidadTotal}`);
                
                // LOG 4: Justo antes del registro del movimiento 'ingreso por producci√≥n externa'
                console.log('\nüîç LOG 4: ANTES DEL REGISTRO DE MOVIMIENTO - ingreso por produccion externa');
                console.log('==========================================');
                console.log(`üìù Par√°metros para INSERT en stock_ventas_movimientos:`);
                console.log(`   - articulo_numero: ${historialData.articulo_fraccionado_id}`);
                console.log(`   - codigo_barras: ${articulo.codigo_barras || 'Sin c√≥digo'}`);
                console.log(`   - kilos: 1`);
                console.log(`   - cantidad: ${cantidadTotal}`);
                console.log(`   - carro_id: ${carroId}`);
                console.log(`   - usuario_id: ${usuarioId}`);
                console.log(`   - tipo: 'ingreso por produccion externa'`);
                
                // Registrar ingreso del art√≠culo vinculado con cantidad calculada
                await db.query(`
                    INSERT INTO stock_ventas_movimientos (
                        articulo_numero, 
                        codigo_barras, 
                        kilos,
                        cantidad,
                        carro_id, 
                        usuario_id, 
                        fecha,
                        tipo
                    ) VALUES ($1, $2, 1, $3, $4, $5, NOW(), 'ingreso por produccion externa')
                `, [
                    historialData.articulo_fraccionado_id,  // Art√≠culo vinculado desde historial
                    articulo.codigo_barras || '',
                    cantidadTotal,     // kilos_producidos + ingredientes_sumados
                    carroId,
                    usuarioId
                ]);
                
                console.log('‚úÖ LOG 4: MOVIMIENTO REGISTRADO EN stock_ventas_movimientos');
                
                // Actualizar stock_movimientos para ingreso
                await db.query(`
                    INSERT INTO stock_real_consolidado (
                        articulo_numero, 
                        stock_movimientos,
                        stock_ajustes, 
                        ultima_actualizacion
                    )
                    VALUES ($1, $2, 0, NOW())
                    ON CONFLICT (articulo_numero) 
                    DO UPDATE SET 
                        stock_movimientos = COALESCE(stock_real_consolidado.stock_movimientos, 0) + $2,
                        ultima_actualizacion = NOW()
                `, [
                    historialData.articulo_fraccionado_id,
                    cantidadTotal // Sumar la cantidad total calculada a stock_movimientos
                ]);
                
                console.log('‚úÖ Movimiento de ingreso por producci√≥n externa registrado correctamente');
                console.log(`‚úÖ Cantidad registrada: ${cantidadTotal} (${historialData.kilos_producidos} + ${historialData.ingredientes_sumados})`);
            } else {
                // Para carros internos: mantener l√≥gica original
                await db.query(`
                    INSERT INTO stock_ventas_movimientos (
                        articulo_numero, 
                        codigo_barras, 
                        kilos,
                        cantidad,
                        carro_id, 
                        usuario_id, 
                        fecha,
                        tipo
                    ) VALUES ($1, $2, 0, $3, $4, $5, NOW(), 'salida a ventas')
                `, [
                    articulo.articulo_numero,
                    articulo.codigo_barras || '',
                    articulo.cantidad,
                    carroId,
                    usuarioId
                ]);
                
                // Actualizar stock_movimientos para salida a ventas
                await db.query(`
                    INSERT INTO stock_real_consolidado (
                        articulo_numero, 
                        stock_movimientos,
                        stock_ajustes, 
                        ultima_actualizacion
                    )
                    VALUES ($1, $2, 0, NOW())
                    ON CONFLICT (articulo_numero) 
                    DO UPDATE SET 
                        stock_movimientos = COALESCE(stock_real_consolidado.stock_movimientos, 0) + $2,
                        ultima_actualizacion = NOW()
                `, [
                    articulo.articulo_numero,
                    articulo.cantidad
                ]);
                
                console.log('‚úÖ Movimiento de salida a ventas registrado correctamente');
            }
            
            // Agregar art√≠culo a la lista para recalcular
            if (!articulosAfectados.includes(articulo.articulo_numero)) {
                articulosAfectados.push(articulo.articulo_numero);
            }
        }

        // LOG 5: Antes y despu√©s de recalcularStockConsolidado()
        console.log('\nüîç LOG 5: ANTES DE RECALCULAR STOCK CONSOLIDADO');
        console.log('==========================================');
        console.log(`üìä Art√≠culos afectados: ${articulosAfectados.length}`);
        console.log(`üìã Lista de art√≠culos a recalcular:`, articulosAfectados);
        
        // Recalcular stock_consolidado para todos los art√≠culos afectados
        if (articulosAfectados.length > 0) {
            console.log('üîÑ Ejecutando recalcularStockConsolidado()...');
            await recalcularStockConsolidado(db, articulosAfectados);
            console.log(`‚úÖ LOG 5: Stock consolidado recalculado para ${articulosAfectados.length} art√≠culo(s)`);
            
            // Verificar el resultado final
            for (const articulo of articulosAfectados) {
                const { rows: stockFinal } = await db.query(`
                    SELECT stock_lomasoft, stock_movimientos, stock_ajustes, stock_consolidado, ultima_actualizacion
                    FROM stock_real_consolidado 
                    WHERE articulo_numero = $1
                `, [articulo]);
                
                if (stockFinal.length > 0) {
                    const stock = stockFinal[0];
                    console.log(`üìä STOCK FINAL para ${articulo}:`);
                    console.log(`   - stock_lomasoft: ${stock.stock_lomasoft || 0}`);
                    console.log(`   - stock_movimientos: ${stock.stock_movimientos || 0}`);
                    console.log(`   - stock_ajustes: ${stock.stock_ajustes || 0}`);
                    console.log(`   - stock_consolidado: ${stock.stock_consolidado || 0}`);
                    console.log(`   - ultima_actualizacion: ${stock.ultima_actualizacion}`);
                } else {
                    console.log(`‚ö†Ô∏è No se encontr√≥ registro en stock_real_consolidado para ${articulo}`);
                }
            }
        } else {
            console.log('‚ö†Ô∏è No hay art√≠culos para recalcular');
        }

        // 6. Actualizar fecha_confirmacion del carro
        await db.query(
            'UPDATE carros_produccion SET fecha_confirmacion = NOW() WHERE id = $1',
            [carroId]
        );

        console.log('\n‚úÖ PRODUCCI√ìN CONFIRMADA');
        console.log('==========================================');

        // Confirmar transacci√≥n
        await db.query('COMMIT');

        return res.json({
            mensaje: 'Producci√≥n confirmada correctamente',
            articulos: articulosCarro.length
        });

    } catch (error) {
        await db.query('ROLLBACK');
        console.error('Error al confirmar producci√≥n:', error);
        return res.status(500).json({ 
            error: 'Error al confirmar la producci√≥n',
            detalle: error.message 
        });
    }
}

module.exports = {
    finalizarProduccion
};
