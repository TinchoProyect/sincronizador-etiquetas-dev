/**
 * VERIFICACI√ìN DEL MAPEO CAMP CORREGIDO
 * Script para confirmar que el corrimiento de campos CAMP funciona correctamente
 */

console.log('üîç [VERIFICACION-CAMP] Iniciando verificaci√≥n del mapeo corregido...');

// Simulaci√≥n de datos de entrada (como los que llegar√≠an del frontend)
const detalleEjemplo = {
    articulo: '7790001234567',
    cantidad: 10,
    valor1: 100,    // netoUnit (E)
    iva1: 21        // alicuota 21% (se convierte a 0.21)
};

// Funciones helper (copiadas del controlador)
function normalizeNumber(numberInput) {
    if (numberInput === null || numberInput === undefined) return 0;
    const num = parseFloat(numberInput);
    return isNaN(num) ? 0 : num;
}

function round2(valor) {
    const n = Number(valor);
    return Math.round((n + Number.EPSILON) * 100) / 100;
}

function toAlicuotaDecimal(valor) {
    const v = parseFloat(valor);
    if (!Number.isFinite(v) || v < 0) return 0;
    return v > 1 ? v / 100 : v;
}

// C√°lculos (igual que en el controlador)
const cantidad = normalizeNumber(detalleEjemplo.cantidad || 0);          // D = 10
const netoUnit = normalizeNumber(detalleEjemplo.valor1 || 0);            // E = 100
const alicDec  = toAlicuotaDecimal(detalleEjemplo.iva1 || 0);            // K = 0.21 (decimal)
const ivaUnit  = round2(netoUnit * alicDec);                             // G = 100 √ó 0.21 = 21
const brutoUnit = round2(netoUnit + ivaUnit);                            // F = 100 + 21 = 121

const netoTotal  = round2(cantidad * netoUnit);                          // L = 10 √ó 100 = 1000
const ivaTotal   = round2(cantidad * ivaUnit);                           // N = 10 √ó 21 = 210
const brutoTotal = round2(netoTotal + ivaTotal);                         // M = 1000 + 210 = 1210

console.log('\nüìä [VERIFICACION-CAMP] Valores calculados:');
console.log(`   cantidad: ${cantidad}`);
console.log(`   netoUnit: ${netoUnit}`);
console.log(`   alicDec: ${alicDec}`);
console.log(`   ivaUnit: ${ivaUnit}`);
console.log(`   brutoUnit: ${brutoUnit}`);
console.log(`   netoTotal: ${netoTotal}`);
console.log(`   ivaTotal: ${ivaTotal}`);
console.log(`   brutoTotal: ${brutoTotal}`);

// MAPEO ANTERIOR (para comparaci√≥n)
console.log('\n‚ùå [MAPEO-ANTERIOR] Lo que se asignaba ANTES:');
console.log(`   CAMP1: ${netoUnit}     // I (sin cambio)`);
console.log(`   CAMP2: ${brutoUnit}    // J (brutoUnit) - YA NO SE USA`);
console.log(`   CAMP3: ${alicDec}      // K (alicDec)`);
console.log(`   CAMP4: ${netoTotal}    // L (netoTotal)`);
console.log(`   CAMP5: ${brutoTotal}   // M (brutoTotal)`);
console.log(`   CAMP6: ${ivaTotal}     // N (ivaTotal)`);

// MAPEO NUEVO CORREGIDO
console.log('\n‚úÖ [MAPEO-CORREGIDO] Lo que se asigna AHORA:');
console.log(`   CAMP1: ${netoUnit}     // I (sin cambio)`);
console.log(`   CAMP2: ${alicDec}      // K (era CAMP3) - CORRIMIENTO`);
console.log(`   CAMP3: ${netoTotal}    // L (era CAMP4) - CORRIMIENTO`);
console.log(`   CAMP4: ${brutoTotal}   // M (era CAMP5) - CORRIMIENTO`);
console.log(`   CAMP5: ${ivaTotal}     // N (era CAMP6) - CORRIMIENTO`);
console.log(`   CAMP6: null            // Sin uso (era ivaTotal)`);

// Objeto detalle como se construir√≠a en el controlador CORREGIDO
const detalleCorregido = {
    id: 'D-test-123',
    id_presupuesto_ext: 'TEST-PRESUPUESTO',
    articulo: detalleEjemplo.articulo,
    cantidad,
    valor1: netoUnit,                 // E
    precio1: brutoUnit,               // F (con IVA)
    iva1: ivaUnit,                    // G (monto unitario)
    diferencia: round2(brutoUnit - 50), // H = Precio1 - Costo (asumiendo costo 50)
    camp1: netoUnit,                  // I (sin cambio)
    camp2: alicDec,                   // K (era camp3) - CORRIMIENTO
    camp3: netoTotal,                 // L (era camp4) - CORRIMIENTO  
    camp4: brutoTotal,                // M (era camp5) - CORRIMIENTO
    camp5: ivaTotal,                  // N (era camp6) - CORRIMIENTO
    camp6: null                       // Sin uso (era ivaTotal)
};

console.log('\nüéØ [OBJETO-DETALLE-FINAL] Detalle como se persistir√° en BD:');
console.log(JSON.stringify(detalleCorregido, null, 2));

// Verificaci√≥n de la correcci√≥n
console.log('\nüîç [VERIFICACION-CORRIMIENTO] Confirmaci√≥n del corrimiento:');
console.log(`‚úÖ CAMP6 ‚Üí CAMP5: ivaTotal (${ivaTotal}) ahora va a CAMP5`);
console.log(`‚úÖ CAMP5 ‚Üí CAMP4: brutoTotal (${brutoTotal}) ahora va a CAMP4`);
console.log(`‚úÖ CAMP4 ‚Üí CAMP3: netoTotal (${netoTotal}) ahora va a CAMP3`);
console.log(`‚úÖ CAMP3 ‚Üí CAMP2: alicDec (${alicDec}) ahora va a CAMP2`);
console.log(`‚úÖ CAMP2 sin nueva asignaci√≥n: brutoUnit (${brutoUnit}) ya NO se asigna`);
console.log(`‚úÖ CAMP6 queda sin uso: null`);

console.log('\nüéâ [VERIFICACION-CAMP] Mapeo corregido verificado exitosamente!');
console.log('üìã [VERIFICACION-CAMP] El corrimiento de campos CAMP se aplic√≥ correctamente seg√∫n especificaci√≥n.');

// Mensaje de commit sugerido
console.log('\nüìù [COMMIT-MESSAGE] Mensaje de commit sugerido:');
console.log('"fix(detalles): corrige corrimiento CAMP (C6‚ÜíC5‚ÜíC4‚ÜíC3‚ÜíC2) en alta local de presupuesto"');
